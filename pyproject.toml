[build-system]
# defined by PEP-518
requires = [
    "Cython>=3",
    "oldest-supported-numpy",
    "setuptools>=79",
    "setuptools_scm[toml]>=8",
]
# defined by PEP-517
build-backend = "setuptools.build_meta"

[project]
authors = [
    {name = "SciTools Contributors", email = "scitools.pub@gmail.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
]
description = "Python wrapper to libmo_unpack"
dynamic = [
    "readme",
    "version",
]
license = "BSD-3-Clause"
license-files = ["LICENSE"]
name = "mo_pack"
requires-python = ">=3.11"

[project.urls]
Code = "https://github.com/SciTools/mo_pack"
Issues = "https://github.com/SciTools/mo_pack/issues"

[tool.check-manifest]
ignore = [
    "src/mo_pack/_packing.c",
    "src/mo_pack/_version.py",
]

[tool.pytest.ini_options]
addopts = ["-ra", "--strict-config", "--strict-markers"]
filterwarnings = ["error"]
log_cli_level = "INFO"
minversion = "6.0"
testpaths = "src/mo_pack"
xfail_strict = true

[tool.setuptools]
zip-safe = false

[tool.setuptools.dynamic]
readme = {file = "README.md", content-type = "text/markdown"}

[tool.setuptools.packages.find]
include = ["mo_pack*"]
where = ["src"]

[tool.setuptools.package-data]
mo_pack = ["tests/test_data/*.pp"]

[tool.setuptools_scm]
write_to = "src/mo_pack/_version.py"
local_scheme = "dirty-tag"
version_scheme = "release-branch-semver"

[tool.numpydoc_validation]
checks = [
    "all",  # Enable all numpydoc validation rules, apart from the following:

    # -> Docstring text (summary) should start in the line immediately
    #    after the opening quotes (not in the same line, or leaving a
    #    blank line in between)
    "GL01",  # Permit summary line on same line as docstring opening quotes.

    # -> Closing quotes should be placed in the line after the last text
    #    in the docstring (do not close the quotes in the same line as
    #    the text, or leave a blank line between the last text and the
    #    quotes)
    "GL02",  # Permit a blank line before docstring closing quotes.

    # -> Double line break found; please use only one blank line to
    #    separate sections or paragraphs, and do not leave blank lines
    #    at the end of docstrings
    "GL03",  # Ignoring.

    # -> See Also section not found
    "SA01",  # Not all docstrings require a "See Also" section.

    # -> No extended summary found
    "ES01",  # Not all docstrings require an "Extended Summary" section.

    # -> No examples section found
    "EX01",  # Not all docstrings require an "Examples" section.

    # -> No Yields section found
    "YD01",  # Not all docstrings require a "Yields" section.
]
exclude = [
    '\.__eq__$',
    '\.__ne__$',
    '\.__repr__$',
]

[tool.repo-review]
ignore = [
    # https://learn.scientific-python.org/development/guides/style/#PC180
    "PC180",  # Uses prettier
    # https://learn.scientific-python.org/development/guides/packaging-simple/#PY004
    "PY004",  # Has docs folder
    # https://learn.scientific-python.org/development/guides/docs/#readthedocsyaml
    "RTD",    # ReadTheDocs

    "PY007",  # TODO: Tox adoption blocked by SciTools/iris#5184.
]

[tool.mypy]
# See https://mypy.readthedocs.io/en/stable/config_file.html
ignore_missing_imports = true
warn_unused_configs = true
warn_unreachable = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
strict = true

[tool.ruff]
line-length = 88

[tool.ruff.format]
preview = false

[tool.ruff.lint]
    preview = false
    select = [
        "ALL",
        # list specific rules to include that is skipped using numpy convention.
        "D212",  # Multi-line docstring summary should start at the first line
    ]

[tool.ruff.lint.isort]
force-sort-within-sections = true

[tool.ruff.lint.per-file-ignores]
# All test scripts.

"src/mo_pack/tests/*.py" = [
    # https://docs.astral.sh/ruff/rules/undocumented-public-module/
   # "D100",  # Missing docstring in public module
   # "D101",  # Missing docstring in public class
   # "D102",  # Missing docstring in public method
   # "D205",  # 1 blank line required between summary line and description
    "D401",  # 1 First line of docstring should be in imperative mood
    "S101",  # Use of assert detected
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64"]

[tool.pixi.environments]
default = { features = [], solve-group = "default" }
dev = { features = ["dev"], solve-group = "default" }
test = { features = ["test", "dev"], solve-group = "default" }

py311 = { features = ["py311"], solve-group = "py311" }
py311-dev = { features = ["dev", "py311"], solve-group = "py311" }
py311-test = { features = ["test", "dev", "py311"], solve-group = "py311" }

py312 = { features = ["py312"], solve-group = "py312" }
py312-dev = { features = ["dev", "py312"], solve-group = "py312" }
py312-test = { features = ["test", "dev", "py312"], solve-group = "py312" }

py313 = { features = ["py313"], solve-group = "py313" }
py313-dev = { features = ["dev", "py313"], solve-group = "py313" }
py313-test = { features = ["test", "dev", "py313"], solve-group = "py313" }

[tool.pixi.dependencies]
cython = ">=3.0.12,<4"
libmo_unpack = ">=3.1.2,<4"
numpy = ">=1.25.0,<3"
setuptools = ">=79.0.1,<80"
setuptools-scm = ">=8.3.1,<9"

[tool.pixi.feature.dev.dependencies]
pre-commit = ">=4.2.0,<5"
ruff = ">=0.11.6,<0.12"

[tool.pixi.feature.dev.pypi-dependencies]
mo-pack = { path = ".", editable = true }

[tool.pixi.feature.dev.tasks]
build = { cmd = ["python", "setup.py", "build_ext", "--inplace"], depends-on = ["clean"] }
clean = { cmd = ["python", "setup.py", "clean_cython"] }
fmt = "ruff format"
lint = "ruff check"
pytest = { cmd = ["pytest"], depends-on = ["build"] }

[tool.pixi.feature.test.dependencies]
pytest = ">=8.3.5,<9"

[tool.pixi.feature.py311.dependencies]
python = "3.11.*"
pip = ">=25.0.1,<26"

[tool.pixi.feature.py312.dependencies]
python = "3.12.*"
pip = ">=25.0.1,<26"

[tool.pixi.feature.py313.dependencies]
python = {version="3.13.*", build="*_cp313"}
pip = ">=25.0.1,<26"
